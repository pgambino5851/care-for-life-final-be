type Family {
    id: ID! @id
    family_name: String!
    # Name of a family in the field.

    family_members: [Person]
    # Array of people in the family

    completed_surveys: [CompletedSurvey]
    # List of surveys family has completed

    dateCreated: DateTime! @createdAt 
    # Timestamp for when family was created
}

type Person {
    id: ID! @id

    person_name: String!
    # Name of person

    completed_surveys: [CompletedSurvey]
    # List of surveys person has completed

    dateCreated: DateTime! @createdAt 
    # Timestamp for when Person was created

    family: Family
    # Family that Person is a part of
}

type Survey {
    id: ID! @id

    dateTaken: DateTime! @createdAt 

    survey_name: String!
    # Name of Survey

    employee: Employee!
    # Name of employee administering survey

    questions: [Question!] 
    # List of questions attached to Survey

    answers: [Answer!] 
    # list of answers
    # Can get rid of this in next iteration
}


 type CompletedSurvey {
    id: ID! @id

    dateTaken: DateTime! @createdAt
    
    answers: [Answer!]
    # List of Answers for this completed survey

    originalSurvey: Survey!
    # Original Survey that this completed survey is based off

    family: Family
    # Family that completed this survey
    
    employee: Employee
    # Employee who administered this survey
 }

# Can get rid of entire employee table
# Talk to Bernie about why you can do this. It has to do with the fact that you # can authenticate employees just using Okta. May still want to keep it to keep # track of the level of your users

type Employee {
    id: ID! @id

    name: String!
    # Name of employee

    type: String!
    # Type of employee, as in whether they're a Field Worker or higher level  #  user like Admin

    surveys: [Survey!]!  
    # List of Surveys employee is responsible for

    dateCreated: DateTime! @createdAt 
}

type Question {
    id: ID! @id
    survey: Survey!
    # Survey the question is attached to.
    family: Family
    # Family that answered this question.
    # Can also probably go away, doesn't just need to be non-nullable,        #  according to Bernie

    question_id: String!
    # There was a second ID on front-end being used for questions and this was # supposed to be for that. Likely don't need it. 

    question_text: String
    # What the question actually asks

    dateTaken: DateTime! @createdAt 
}

type Answer {
    id: ID! @id
    dateTaken: DateTime! @createdAt
    
    answer: String!
    # What the answer is/the text of the answer.

    question: Question! 
    # Question that this answer relates to.

    respondent: Person
    # Person who answered the question.

} 
  

